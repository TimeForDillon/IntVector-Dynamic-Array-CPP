/*******************************************************************************
 * AUTHOR        : Dillon Welsh
 * ASSIGNMENT 5  : INTVECTOR
 * CLASS         : CS3A
 * SECTION       : 71206
 * DUE DATE      : 10/11/2020
 ******************************************************************************/

#ifndef INTVECTOR_H
#define INTVECTOR_H

#include <iostream>
#include <cstdlib>

using namespace std;

class IntVector
{
private:
    unsigned sz;        // CALC - number of used elements
    unsigned cap;       // CALC - max number of elements
    int * data;         // CALC - dynamic array

public:
    /********************************
     ** CONSTRUCTORS & DESTRUCTORS **
     ********************************/
    IntVector();                            // Constructor
    IntVector(unsigned size);               // Constructor
    IntVector(unsigned size, int value);    // Constructor
    IntVector(const IntVector & source);    // Copy Constructor
    ~IntVector();                           // Destructor

    /***************
     ** ACCESSORS **
     ***************/
    unsigned size() const;
    unsigned capacity() const;
    bool empty() const;
    const int & at(unsigned index) const;
    const int & front() const;
    const int & back() const;

    /**************
     ** MUTATORS **
     **************/
    void expand();
    void expand(unsigned amount);
    void insert(unsigned index, int value);
    void erase(unsigned index);
    void push_back(int value);
    void pop_back();
    void clear();
    void resize(unsigned size);
    void resize(unsigned size, int value);
    void reserve(unsigned n);
    void assign(unsigned size, int value);
    int & at(unsigned index);
    int & front();
    int & back();
    IntVector & operator=(const IntVector & source);
    IntVector & operator+=(const IntVector & source);

private:

};

/*******************************************************************************
 * IntVector Class
 *  This class represents a vector of ints. This class replicates the vector
 *  class that is currently in c++.
 ******************************************************************************/

/********************************
 ** CONSTRUCTORS & DESTRUCTORS **
 ********************************/

/*******************************************************************************
 * IntVector();
 * Constructor; Sets size and capacity of dynamic array to 0.
 * Parameters: none
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * IntVector(unsigned size);
 * Constructor; Sets size and capacity to passed value for dynamic array. Sets
 *              each element of array to 0.
 * Parameters: unsigned
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * IntVector(unsigned size, int value);
 * Constructor; Sets size and capacity to passed values for dynamic array. Sets
 *              each element of array to passed value.
 * Parameters: unsigned, int
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * IntVector(const IntVector & source);
 * Copy Constructor; copys IntVector object for dynamic array
 * Parameters: const IntVector & source
 * Return: IntVector
 ******************************************************************************/

/*******************************************************************************
 * ~IntVector();
 * Destructor; deletes dynamic memory
 * Parameters: none
 * Return: none
 ******************************************************************************/

/***************
 ** ACCESSORS **
 ***************/

/*******************************************************************************
 * unsigned size() const;
 *
 * Accessor; Returns current size of dynamic array.
 * -----------------------------------------------------------------------------
 * Parameters: none
 * -----------------------------------------------------------------------------
 * Return: unsigned
 ******************************************************************************/

/*******************************************************************************
 * unsigned capacity() const;
 *
 * Accessor; Returns current capacity of dynamic array.
 * -----------------------------------------------------------------------------
 * Parameters: none
 * -----------------------------------------------------------------------------
 * Return: unsigned
 ******************************************************************************/

/*******************************************************************************
 * bool empty() const;
 *
 * Accessor; Returns true if dynamic array is empty.
 * -----------------------------------------------------------------------------
 * Parameters: none
 * -----------------------------------------------------------------------------
 * Return: bool
 ******************************************************************************/

/*******************************************************************************
 * const int & at(unsigned index) const;
 *
 * Accessor; Returns value in dynamic array at passed value index.
 * -----------------------------------------------------------------------------
 * Parameters: unsigned
 * -----------------------------------------------------------------------------
 * Return: const int &
 ******************************************************************************/

/*******************************************************************************
 * const int & front() const;
 *
 * Accessor; Returns value in first element of array.
 * -----------------------------------------------------------------------------
 * Parameters: none
 * -----------------------------------------------------------------------------
 * Return: const int &
 ******************************************************************************/

/*******************************************************************************
 * const int & back() const;
 *
 * Accessor; Returns value in last element of array.
 * -----------------------------------------------------------------------------
 * Parameters: none
 * -----------------------------------------------------------------------------
 * Return: const int &
 ******************************************************************************/

/**************
 ** MUTATORS **
 **************/

/*******************************************************************************
 * void expand();
 *
 * Mutator; Doubles the cap of dynamic array in a new one.
 * -----------------------------------------------------------------------------
 * Parameters: none
 * -----------------------------------------------------------------------------
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * void expand(unsigned amount);
 *
 * Mutator; Increases the cap of dynamic array by the passed value in a new one.
 * -----------------------------------------------------------------------------
 * Parameters: none
 * -----------------------------------------------------------------------------
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * void insert(unsigned index, int value);
 *
 * Mutator; Inserts the passed value into the array at the passed index and
 * shits the occupied elements over by one.
 * -----------------------------------------------------------------------------
 * Parameters: unsigned index, int value
 * -----------------------------------------------------------------------------
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * void erase(unsigned index);
 *
 * Mutator; Erases the element of the array in the passed index.
 * -----------------------------------------------------------------------------
 * Parameters: unsigned index
 * -----------------------------------------------------------------------------
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * void push_back(int value);
 *
 * Mutator; Adds the passed value to the end of the array.
 * -----------------------------------------------------------------------------
 * Parameters: int value
 * -----------------------------------------------------------------------------
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * void pop_back();
 *
 * Mutator; Removes the element at the end of the array.
 * -----------------------------------------------------------------------------
 * Parameters: none
 * -----------------------------------------------------------------------------
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * void clear();
 *
 * Mutator; Emptys the array sets size to zero.
 * -----------------------------------------------------------------------------
 * Parameters: none
 * -----------------------------------------------------------------------------
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * void resize(unsigned size);
 *
 * Mutator; Sets new size anything over is set to 0
 * -----------------------------------------------------------------------------
 * Parameters: unsigned size
 * -----------------------------------------------------------------------------
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * void resize(unsigned size, int value);
 *
 * Mutator; Sets new size anything over is set to passed value.
 * -----------------------------------------------------------------------------
 * Parameters: unsigned size, int value
 * -----------------------------------------------------------------------------
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * void reserve(unsigned n);
 *
 * Mutator; Sets new cap if above current cap
 * -----------------------------------------------------------------------------
 * Parameters: unsigned n
 * -----------------------------------------------------------------------------
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * void assign(unsigned size, int value);
 *
 * Mutator; Resets array to new size and starting values
 * -----------------------------------------------------------------------------
 * Parameters: unsigned size, int value
 * -----------------------------------------------------------------------------
 * Return: none
 ******************************************************************************/

/*******************************************************************************
 * int & at(unsigned index);
 *
 * Mutator; Returns the value at the passed index.
 * -----------------------------------------------------------------------------
 * Parameters: unsigned index
 * -----------------------------------------------------------------------------
 * Return: int &
 ******************************************************************************/

/*******************************************************************************
 * int & front();
 *
 * Mutator; Returns the value at the first element.
 * -----------------------------------------------------------------------------
 * Parameters: none
 * -----------------------------------------------------------------------------
 * Return: int &
 ******************************************************************************/

/*******************************************************************************
 * int & back();
 *
 * Mutator; Returns the value at the last element.
 * -----------------------------------------------------------------------------
 * Parameters: none
 * -----------------------------------------------------------------------------
 * Return: int &
 ******************************************************************************/

#endif // INTVECTOR_H
